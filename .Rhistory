cluster_hier_single <- agnes(x = matriz_D, method = "single")
# Construção do dendrograma "single linkage"
dev.off()
fviz_dend(x = cluster_hier_single, show_labels = F)
# 2º Teste: Elaboração da clusterização hierárquica como "complete linkage"
cluster_hier_complete <- agnes(x = matriz_D, method = "complete")
# Construção do dendrograma "complete linkage"
fviz_dend(x = cluster_hier_complete, show_labels = F)
# 3º Teste: Elaboração da clusterização hierárquica como "average linkage"
cluster_hier_average <- agnes(x = matriz_D, method = "average")
# Construção do dendrograma "average linkage"
fviz_dend(x = cluster_hier_average, show_labels = F)
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_complete,
h = 5.5,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
coeficientes <- sort(cluster_hier_complete$height, decreasing = FALSE)
esquema <- as.data.frame(cbind(cluster_hier_complete$merge, coeficientes))
names(esquema) <- c("Cluster1", "Cluster2", "Coeficientes")
esquema
paises$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 12))
pais_padronizado$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 12))
View(cluster_hier_single)
View(pais_padronizado)
summary(anova_child_mort <- aov(formula = child_mort ~ cluster_H,
data = pais_padronizado))
summary(anova_exports <- aov(formula = exports ~ cluster_H,
data = pais_padronizado))
summary(anova_health <- aov(formula = health ~ cluster_H,
data = pais_padronizado))
summary(anova_imports <- aov(formula = imports ~ cluster_H,
data = pais_padronizado))
summary(anova_income <- aov(formula = income ~ cluster_H,
data = pais_padronizado))
summary(anova_inflation <- aov(formula = inflation ~ cluster_H,
data = pais_padronizado))
summary(anova_lifeexpec <- aov(formula = life_expec ~ cluster_H,
data = pais_padronizado))
summary(anova_totalfer <- aov(formula = total_fer ~ cluster_H,
data = pais_padronizado))
summary(anova_gdpp <- aov(formula = gdpp ~ cluster_H,
data = pais_padronizado))
análise <- group_by(paises, cluster_H) %>%
summarise(income = mean(income, na.rm = TRUE),
gdpp = mean(gdpp, na.rm = TRUE),
mort = mean(child_mort, na.rm = TRUE),
health = mean(health, na.rm = TRUE),
expec = mean(life_expec, na.rm = TRUE))
View(análise)
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4", #função 'ade4' para matriz de distâncias em var. binárias
"hexView", "jpeg") #leitura de imagens
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_complete_pad,
h = 55,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
com_rosca <- as.data.frame(readJPEG("com_rosca2.jpg"))
com_rosca_pad <- as.data.frame(scale(com_rosca))
# Matriz de dissimilaridades
matriz_D <- com_rosca %>%
dist(method = "euclidean")
matriz_D_pad <- com_rosca_pad %>%
dist(method = "euclidean")
# 2º Teste: Elaboração da clusterização hierárquica como "complete linkage"
cluster_hier_complete <- agnes(x = matriz_D, method = "complete")
cluster_hier_complete_pad <- agnes(x = matriz_D_pad, method = "complete")
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_complete_pad,
h = 55,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4", #função 'ade4' para matriz de distâncias em var. binárias
"hexView", "jpeg") #leitura de imagens
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
#com_rosca <- readRaw("com_rosca2.jpg")
base <- readJPEG("com_rosca2.jpg")
com_rosca <- as.data.frame(readJPEG("com_rosca2.jpg"))
dimension <- as.data.frame(dimension)
rowcol <- dim(dimension)
com_rosca_matriz <- matrix(com_rosca$fileRaw, nrow = rowcol[1], ncol = rowcol[2], byrow = TRUE)
com_rosca <- as.data.frame(readJPEG("com_rosca2.jpg"))
dimension <- as.data.frame(dimension)
com_rosca_pad <- as.data.frame(scale(com_rosca))
# Matriz de dissimilaridades
matriz_D <- com_rosca %>%
dist(method = "euclidean")
matriz_D_pad <- com_rosca_pad %>%
dist(method = "euclidean")
# 1º Teste: Elaboração da clusterização hierárquica como "single linkage"
cluster_hier_single <- agnes(x = matriz_D, method = "single")
cluster_hier_single_pad <- agnes(x = matriz_D_pad, method = "single")
# Construção do dendrograma "single linkage"
dev.off()
fviz_dend(x = cluster_hier_single, show_labels = F)
fviz_dend(x = cluster_hier_single_pad, show_labels = F)
# 2º Teste: Elaboração da clusterização hierárquica como "complete linkage"
cluster_hier_complete <- agnes(x = matriz_D, method = "complete")
cluster_hier_complete_pad <- agnes(x = matriz_D_pad, method = "complete")
# Construção do dendrograma "complete linkage"
fviz_dend(x = cluster_hier_complete, show_labels = F)
fviz_dend(x = cluster_hier_complete_pad, show_labels = F)
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_complete_pad,
h = 55,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
coeficientes <- sort(cluster_hier_complete_pad$height, decreasing = FALSE)
esquema <- as.data.frame(cbind(cluster_hier_complete_pad$merge, coeficientes))
names(esquema) <- c("Cluster1", "Cluster2", "Coeficientes")
esquema
View(esquema)
com_rosca$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 4))
com_rosca_padcluster_H <- factor(cutree(tree = cluster_hier_complete, k = 4))
com_rosca_pad$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 4))
library(imager)
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4", #função 'ade4' para matriz de distâncias em var. binárias
"hexView", "jpeg", "imager") #leitura de imagens
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
teste = load.image("com_rosca1.jpg")
teste = grayscale(teste)
data_teste = as.data.frame(teste)
View(data_teste)
save.image(im = teste, "teste_com_rosca.jpg")
View(com_rosca)
View(data_teste)
teste = readJPEG("com_rosca1.jpg")
teste = grayscale(teste)
data_teste = as.data.frame(teste)
View(data_teste)
com_rosca = grayscale(com_rosca)
#com_rosca <- readRaw("com_rosca2.jpg")
com_rosca <- readJPEG("com_rosca2.jpg")
com_rosca = grayscale(com_rosca)
teste = readJPEG("com_rosca1.jpg")
teste = grayscale(teste)
data_teste = as.data.frame(teste)
View(data_teste)
teste = readJPEG("com_rosca1.jpg")
teste = grayscale(teste)
data_teste = as.data.frame(teste)
save.image(im = teste, "teste_com_rosca.jpg")
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4", #função 'ade4' para matriz de distâncias em var. binárias
"hexView", "jpeg", "imager") #leitura de imagens
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
teste = readJPEG("com_rosca1.jpg")
teste = grayscale(teste)
data_teste = as.data.frame(teste)
save.image(im = teste, "teste_com_rosca.jpg")
a = grayscale(teste)
teste = grayscale(teste, drop=TRUE)
teste = grayscale(teste, method = "Luma", drop=TRUE)
teste = load.image("com_rosca1.jpg")
teste = grayscale(teste, method = "Luma", drop=TRUE)
teste = load.image("com_rosca1.jpg")
teste = grayscale(teste, method = "Luma", drop=TRUE)
save.image(im = teste, "teste_com_rosca.jpg")
data_teste = as.data.frame(teste)
View(data_teste)
teste = load.image("com_rosca1.jpg")
data_teste = as.data.frame(teste)
View(data_teste)
teste = grayscale(teste, method = "Luma", drop=TRUE)
data_teste = as.data.frame(teste)
View(data_teste)
rowcol <- dim(com_rosca)
rowcol <- dim(data_teste)
nrow(data_teste)
View(data_teste)
data_copy = data_teste
data_teste[170235]
data_teste[170235,0]
data_teste[170235:1]
data_teste[170235][1]
data_teste[170235][0]
data_teste[170235,1]
data_teste[170235,2]
nrow(data_teste)
nlin = data_teste[nrow(data_teste),1]
ncol = data_teste[nrow(data_teste),2]
nlin
ncol
ncoluna = data_teste[nrow(data_teste),2]
mat1 <- matrix(data_teste[,3], nrow = nlin)
View(mat1)
dim(mat1)
teste = grayscale(teste)
teste = load.image("com_rosca1.jpg")
teste = grayscale(teste)
data_teste = as.data.frame(teste)
View(data_teste)
summary(mat1)
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4", #função 'ade4' para matriz de distâncias em var. binárias
"hexView", "jpeg", "imager") #leitura de imagens
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Importando imagem de peça com rosca
com_rosca <- load.image("com_rosca2.jpg")
# Transformando imagem para escala de cinza
com_rosca = grayscale(com_rosca)
# Transformando em um dataframe
com_rosca <- as.data.frame(com_rosca)
# Criando matriz onde cada elemento corresponde a um pixel da imagem
nlin = com_rosca[nrow(com_rosca),1]
ncoluna = com_rosca[nrow(com_rosca),2]
mat1 <- matrix(com_rosca[,3], nrow = nlin)
dim(mat1)
View(mat1)
mat1_pad <- as.data.frame(scale(mat1))
# Matriz de dissimilaridades
matriz_D <- mat1 %>%
dist(method = "euclidean")
matriz_D_pad <- mat1_pad %>%
dist(method = "euclidean")
# 1º Teste: Elaboração da clusterização hierárquica como "single linkage"
cluster_hier_single <- agnes(x = matriz_D, method = "single")
cluster_hier_single_pad <- agnes(x = matriz_D_pad, method = "single")
# Construção do dendrograma "single linkage"
dev.off()
fviz_dend(x = cluster_hier_single, show_labels = F)
fviz_dend(x = cluster_hier_single_pad, show_labels = F)
# 2º Teste: Elaboração da clusterização hierárquica como "complete linkage"
cluster_hier_complete <- agnes(x = matriz_D, method = "complete")
cluster_hier_complete_pad <- agnes(x = matriz_D_pad, method = "complete")
# Construção do dendrograma "complete linkage"
fviz_dend(x = cluster_hier_complete, show_labels = F)
fviz_dend(x = cluster_hier_complete_pad, show_labels = F)
# Construção do dendrograma "complete linkage"
fviz_dend(x = cluster_hier_complete, show_labels = F)
# 3º Teste: Elaboração da clusterização hierárquica como "average linkage"
cluster_hier_average <- agnes(x = matriz_D, method = "average")
cluster_hier_average_pad <- agnes(x = matriz_D_pad, method = "average")
# Construção do dendrograma "average linkage"
fviz_dend(x = cluster_hier_average, show_labels = F)
fviz_dend(x = cluster_hier_average_pad, show_labels = F)
# Construção do dendrograma "average linkage"
fviz_dend(x = cluster_hier_average, show_labels = F)
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_average,
h = 4,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_average,
h = 5,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
coeficientes <- sort(cluster_hier_averaged$height, decreasing = FALSE)
coeficientes <- sort(cluster_hier_average$height, decreasing = FALSE)
esquema <- as.data.frame(cbind(cluster_hier_average$merge, coeficientes))
names(esquema) <- c("Cluster1", "Cluster2", "Coeficientes")
esquema
View(esquema)
com_rosca$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 3))
com_rosca_pad$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 3))
mat1$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 3))
mat1_pad$cluster_H <- factor(cutree(tree = cluster_hier_complete, k = 3))
View(mat1)
View(mat1_pad)
View(esquema)
save.image(im = com_rosca, "com_rosca_gray.jpg")
# Importando imagem de peça com rosca
com_rosca <- load.image("com_rosca1.jpg")
# Transformando imagem para escala de cinza
com_rosca = grayscale(com_rosca)
save.image(im = com_rosca, "com_rosca_gray.jpg")
# Transformando em um dataframe
com_rosca <- as.data.frame(com_rosca)
# Criando matriz onde cada elemento corresponde a um pixel da imagem
nlin = com_rosca[nrow(com_rosca),1]
ncoluna = com_rosca[nrow(com_rosca),2]
mat1 <- matrix(com_rosca[,3], nrow = nlin)
dim(mat1)
mat1_pad <- as.data.frame(scale(mat1))
# Matriz de dissimilaridades
matriz_D <- mat1 %>%
dist(method = "euclidean")
matriz_D_pad <- mat1_pad %>%
dist(method = "euclidean")
# 2º Teste: Elaboração da clusterização hierárquica como "complete linkage"
cluster_hier_complete <- agnes(x = matriz_D, method = "complete")
cluster_hier_complete_pad <- agnes(x = matriz_D_pad, method = "complete")
# Construção do dendrograma "complete linkage"
fviz_dend(x = cluster_hier_complete, show_labels = F)
fviz_dend(x = cluster_hier_complete_pad, show_labels = F)
# 3º Teste: Elaboração da clusterização hierárquica como "average linkage"
cluster_hier_average <- agnes(x = matriz_D, method = "average")
cluster_hier_average_pad <- agnes(x = matriz_D_pad, method = "average")
# Construção do dendrograma "average linkage"
fviz_dend(x = cluster_hier_average, show_labels = F)
fviz_dend(x = cluster_hier_average_pad, show_labels = F)
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_average,
h = 5,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_average,
h = 4,5,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_average,
h = 4.5,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
# Importando imagem de peça com rosca
com_rosca <- load.image("sem_rosca11.jpg")
# Transformando imagem para escala de cinza
com_rosca = grayscale(com_rosca)
# Importando imagem de peça com rosca
com_rosca <- load.image("sem_rosca1.jpg")
# Transformando imagem para escala de cinza
com_rosca = grayscale(com_rosca)
# Transformando em um dataframe
com_rosca <- as.data.frame(com_rosca)
# Criando matriz onde cada elemento corresponde a um pixel da imagem
nlin = com_rosca[nrow(com_rosca),1]
ncoluna = com_rosca[nrow(com_rosca),2]
mat1 <- matrix(com_rosca[,3], nrow = nlin)
dim(mat1)
mat1_pad <- as.data.frame(scale(mat1))
# Matriz de dissimilaridades
matriz_D <- mat1 %>%
dist(method = "euclidean")
matriz_D_pad <- mat1_pad %>%
dist(method = "euclidean")
# 2º Teste: Elaboração da clusterização hierárquica como "complete linkage"
cluster_hier_complete <- agnes(x = matriz_D, method = "complete")
cluster_hier_complete_pad <- agnes(x = matriz_D_pad, method = "complete")
# Construção do dendrograma "complete linkage"
fviz_dend(x = cluster_hier_complete, show_labels = F)
fviz_dend(x = cluster_hier_complete_pad, show_labels = F)
# 3º Teste: Elaboração da clusterização hierárquica como "average linkage"
cluster_hier_average <- agnes(x = matriz_D, method = "average")
# 3º Teste: Elaboração da clusterização hierárquica como "average linkage"
cluster_hier_average <- agnes(x = matriz_D, method = "average")
cluster_hier_average_pad <- agnes(x = matriz_D_pad, method = "average")
# Construção do dendrograma "average linkage"
fviz_dend(x = cluster_hier_average, show_labels = F)
fviz_dend(x = cluster_hier_average_pad, show_labels = F)
# Dendrograma com visualização dos clusters (selecionando por "altura")
fviz_dend(x = cluster_hier_average,
h = 4.5,
color_labels_by_k = F,
rect = T,
rect_fill = T,
rect_border = "black",
lwd = 1,
show_labels = F,
ggtheme = theme_bw())
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4", #função 'ade4' para matriz de distâncias em var. binárias
"hexView", "jpeg", "imager") #leitura de imagens
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Importando imagem de peça com rosca
com_rosca <- load.image("sem_rosca1.jpg")
# Transformando imagem para escala de cinza
com_rosca = grayscale(com_rosca)
save.image(im = com_rosca, "com_rosca_gray.jpg")
